{
	"name": "legoFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "inventories",
						"type": "DatasetReference"
					},
					"name": "inventories"
				},
				{
					"dataset": {
						"referenceName": "inventory_parts",
						"type": "DatasetReference"
					},
					"name": "inventoryParts"
				},
				{
					"dataset": {
						"referenceName": "inventory_sets",
						"type": "DatasetReference"
					},
					"name": "inventorySets"
				},
				{
					"dataset": {
						"referenceName": "part_categories",
						"type": "DatasetReference"
					},
					"name": "partCategories"
				},
				{
					"dataset": {
						"referenceName": "parts",
						"type": "DatasetReference"
					},
					"name": "parts"
				},
				{
					"dataset": {
						"referenceName": "themes",
						"type": "DatasetReference"
					},
					"name": "themes"
				},
				{
					"dataset": {
						"referenceName": "color",
						"type": "DatasetReference"
					},
					"name": "colors"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sql_color",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "sql_themes",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "sql_parts",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          invent_id as string,",
				"          version as string,",
				"          set_num as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> inventories",
				"source(output(",
				"          invent_id as string,",
				"          part_num as string,",
				"          color_id as string,",
				"          quantity as string,",
				"          is_spare as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> inventoryParts",
				"source(output(",
				"          invent_id as string,",
				"          set_num as string,",
				"          quantity as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> inventorySets",
				"source(output(",
				"          id as string,",
				"          name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> partCategories",
				"source(output(",
				"          part_num as string,",
				"          name as string,",
				"          part_cat_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> parts",
				"source(output(",
				"          id as string,",
				"          name as string,",
				"          parent_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> themes",
				"source(output(",
				"          id as short,",
				"          name as string,",
				"          rgb as string,",
				"          is_trans as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> colors",
				"colors sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as string,",
				"          name as string,",
				"          rgb as string,",
				"          is_trans as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"themes sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2",
				"parts sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink3"
			]
		}
	}
}